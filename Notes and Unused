
Current commit notepad:

"debugging for login controller"


Tasks:

-- make order views only available through specific email address/usernames




Finished Tasks:

-- delete duplicate views if necessary
-- add sessions and encryption
-- add username to customers table if need to
-- change customer_notes to :admin_id
-- change order_notes to :admin_id
-- make tables with rake tasks
-- migrate files
-- don't forget to include these in customers table migration:
class CreateUsers < ActiveRecord::Migration[5.1]
    def up
        create_table :users do |t|
            t.string :username
            t.string :password_digest
        end
    end
 
    def down
        drop_table :users
    end
end

-- fill out model relationships
-- fill out application controller

Reminders:

1. think of an extended feature
2. make a feature to send an email to the owner if an order is edited
3. readme instructions includes setting session secret


Notes:
Customer does not have view because all customer information is private and handled by the business personnel
Only business personnel can edit projects



Unused Code/code to use:

  # admin_list = [
  #     {admin_username: 'smallbizadmin', admin_password: 'admin_password_1', customer_notes_date: '4/17/2018', customer_notes: 'This customer has a large plantation-style home that he plans to renovate in the next few months.', order_notes_date: '4/16/2018', order_notes: 'This order was for a small repair in wooden fencing.'}
  # ]
  
  # admin_list.each do |i|
  #   Admin.create(i)
  # end

  # customer_list = [
  #     {first_name: 'Bob', last_name: 'Smith', email: 'bob_smith999998@smithmail.com', password: 'customer_password_1', address: '123 Main Street, Smithville, OH 63120', phone_1: '555-231-5555', phone_2: '123-456-7890', fax: '980-765-4321'}
  #   ]

  # customer_list.each do |i|
  #    Customer.create(i)
  # end
    
  # order_list = [
  #   {kind_of_service: 'repair', order_actual_charges: '50.12', order_estimated_charges: '55.00', materials_used: 'none', materials_cost: '0.00', labor_hours: '2', labor_cost: "46.00", service_specialist_1: 'Dale Johnson', service_specialist_2: 'Frank Piazza', service_specialist_3: "", service_specialist_4: ""}
  # ]

  # order_list.each do |i|
  #   Order.create(i)
  # end


class RenameColumns < ActiveRecord::Migration[5.2]
  def change
    rename_column :customers, :customer_notes, :admin_id
    rename_column :orders, :order_notes, :admin_id
  end
end

  admin_username
  admin_password
  customer_notes_date
  customer_notes
  order_notes_date
  order_notes




class AdminsController < ApplicationController

    get '/admin/signup' do


        erb :'/admin/signup'
    end
    
    get '/admin/login' do
        erb :'/admin/login'
    end



    get '/admin/new_order' do
        erb :'/admin/new_order'
    end

    get '/admin/:id' do
        @order = Order.find_by(params[:order_id])
        if not logged in and login by admin is true and a login by customer is not true and admin password is authenticated
            redirect '/admin/customers_and_orders'
        else
            redirect '/admin/login'
        else 
        
    end
    
    post '/admin' do
        @order = Order.create(customer_first_name: params["customer_first_name"], customer_last_name: params["customer_last_name"], email: params["email"], password: params["password"], address: params["address"], phone_1: params["phone_1"], phone_2: params["phone_2"], fax: params["fax"])
        @order.save
    end

    post '/admin/:id' do
        @order = Order.find(customer_first_name: params["customer_first_name"], customer_last_name: params["customer_last_name"], email: params["email"], password: params["password"], address: params["address"], phone_1: params["phone_1"], phone_2: params["phone_2"], fax: params["fax"])
        @order.update
        redirect '/admin/customers_and_orders'
    end
end

class CreateCustomers < ActiveRecord::Migration[5.2]
  def change
    create_table :customers do |t|
      t.string :customer_first_name
      t.string :customer_last_name
      t.string :email
      t.string :password
      t.string :password_digest
      t.string :address
      t.string :phone_1
      t.string :phone_2
      t.string :fax
      t.string :customer_notes
    end
  end
end

class CreateOrders < ActiveRecord::Migration[5.2]
  def change
    create_table :orders do |t|
      t.string :kind_of_service
      t.float :order_actual_charges
      t.float :order_estimated_charges
      t.string :materials_used
      t.float :materials_cost
      t.float :labor_hours
      t.float :labor_cost
      t.string :service_specialist_1
      t.string :service_specialist_2
      t.string :service_specialist_3
      t.string :service_specialist_4
      t.string :order_notes
      t.integer :project_id
      t.integer :customer_id        
    end
  end
end




Overview
The application is designed to let the user to :

Create a new account and sign-in
Edit his profile page by updating his personal info name & email
Create a new todo, show todo list, update and delete todos
Running the app
fork and clone this repo.
cd the directory from the terminal
in the terminal run bundle install to install all required gems
run shotgun to open the app
open the local host in your web browser
start by hitting sign-up button Note You have to enter a proper email to be allowed to signup to the application.


source 'http://rubygems.org'
gem 'sinatra'
gem 'activerecord', '~> 4.2', '>= 4.2.6', :require => 'active_record'
gem 'sinatra-activerecord', :require => 'sinatra/activerecord'
gem 'rake'
gem 'sinatra-flash'
gem 'require_all'
gem 'sqlite3'
gem 'thin'
gem 'shotgun'
gem 'pry'
gem 'bcrypt'
gem "tux"
group :test do
  gem 'rspec'
  gem 'capybara'
  gem 'rack-test'
  gem 'database_cleaner', git: 'https://github.com/bmabey/database_cleaner.git'
end


class AddColumnsToProjects < ActiveRecord::Migration[5.2]
  def change
    add_column :projects, :project_name, :string
    add_column :projects, :project_location, :string
    add_column :projects, :project_estimated_charges, :real
    add_column :projects, :project_actual_charges, :real
    add_column :projects, :customer_id, :integer 
  end
end


class CreateCustomers < ActiveRecord::Migration[5.2]
  def change
    create_table :customers do |t|
      t.string :customer_name
      t.string :email
      t.string :password
      t.string :address_1
      t.string :address_2
      t.string :phone_1
      t.string :phone_2
      t.string :customer_notes
    end
  end
end


    # register Sinatra::ActiveRecordExtension
    # configure do 
    #     enable :sessions
    # set :session_secret, "my_secret"
    # set :views, Proc.new { File.join(root, "../views/") }
    
    # set :views, 'app/views' 

class ApplicationController < Sinatra::Base
  register Sinatra::ActiveRecordExtension
  set :views, Proc.new { File.join(root, "../views/") }

  configure do
    enable :sessions
    set :session_secret, "secret"
  end

  get '/' do 
    erb :home
  end

  get '/registrations/signup' do
    erb :'/registrations/signup'
  end

  post '/registrations' do
    
    redirect '/users/home'
  end

  get '/sessions/login' do
    erb :'sessions/login'
  end

  post '/sessions' do
    redirect '/users/home'
  end

  get '/sessions/logout' do 
    redirect '/'
  end

  get '/users/home' do
    erb :'/users/home'
  end

end


Future Features:

-- Make admin able to make a new customer account
-- add ability to edit a note
-- Make relevant properties searchable in each view
-- Make a new table for notes on customers and orders ... use a admin username and password for a different webpage